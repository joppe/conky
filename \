require 'cairo'
require 'imlib2'

function render_image(im)
    x = nil
	x = (im.x or 0)
	y = nil
	y = (im.y or 0)
	w = nil
	w = (im.w or 0)
	h = nil
	h = (im.h or 0)
	file = nil
	file = tostring (im.file)
	if file == nil then print ("set image file") end
	---------------------------------------------
	local show = imlib_load_image (file)

	if show == nil then return end
	imlib_context_set_image (show)
	if tonumber (w) == 0 then
		width = imlib_image_get_width ()
	else
		width = tonumber (w)
	end

	if tonumber (h) == 0 then
		height = imlib_image_get_height ()
	else
		height = tonumber (h)
	end

	imlib_context_set_image (show) 
	local scaled = imlib_create_cropped_scaled_image (0, 0,
			imlib_image_get_width (), imlib_image_get_height (), width, height) 
	imlib_free_image ()
	imlib_context_set_image (scaled)
	imlib_render_image_on_drawable (x, y)
	imlib_free_image ()
	show = nil
end

function render_ring(cr, position, radius, thickness, angle, color)
    cairo_arc(
        cr,
        position.x,
        position.y,
        radius,
        angle.start,
        angle.stop
    )
    cairo_set_source_rgba(
        cr,
        color.r,
        color.g,
        color.b,
        color.a
    )
    cairo_set_line_width(
        cr,
        thickness
    )
    cairo_stroke(cr)
end

function render_text(cr, text, font, size, position, color)
    local extents = cairo_text_extents_t:create()

    cairo_select_font_face(
        cr,
        font,
        CAIRO_FONT_SLANT_NORMAL,
        CAIRO_FONT_WEIGHT_NORMAL
    )
    cairo_set_font_size(
        cr,
        size
    )
    cairo_text_extents(
	cr,
	text,
	extents
    )
    cairo_set_source_rgba(
        cr,
        color.r,
        color.g,
        color.b,
        color.a
    )
    cairo_move_to(
        cr,
        position.x,
        position.y
    )
    cairo_show_text(
        cr,
        text
    )
    cairo_stroke(cr)

print('size', extents.width, extents.height)
print('bearing', extents.x_bearing, extents.y_bearing)

    return {
	width = extents.width + extents.x_bearing,
	height = extents.height + extents.y_bearing
    }
end
